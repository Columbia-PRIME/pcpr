% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/root_pcp_noncvx.R
\name{root_pcp_noncvx}
\alias{root_pcp_noncvx}
\title{Squareroot PCP function with non-convex replacement for nuclear norm}
\usage{
root_pcp_noncvx(D, lambda, mu, r, verbose = FALSE)
}
\arguments{
\item{D}{The original dataset.}

\item{lambda}{The \code{lambda} parameter penalizes the proximal L1 gradient on the \code{S} matrix.}

\item{mu}{The \code{mu} parameter penalizes the error term.}

\item{r}{The \code{r} parameter specifies the desired rank.}

\item{verbose}{A logical indicating if you would like information on the number of iterations required to reach convergence printed. Optional, and by default \code{verbose = FALSE}.}
}
\value{
Returns two solution matrices, the low rank \code{L} matrix and the sparse \code{S} matrix.
}
\description{
\code{root_pcp_noncvx} implements \code{rootPCP} with NO non-negativity constraint on the \code{L} solution matrix and replaces the nuclear norm with a projection onto a smaller rank. \cr \cr
It solved the following ADMM splitting problem: \cr \cr
min_{L,S} \cr
1_{rank(L) <= r}  + lambda * ||S||_1 + mu * ||L+S-D||_F \cr \cr
This is first transformed to the problem: \cr \cr
min_{L1,L2,S1,S2,Z} \cr
}
\details{
1_{rank(L1) <= r} + lambda * ||S1||_1 + mu * ||Z||_F \cr \cr
s.t. L1 = L2; S1 = S2; L2 + S2 + Z = D. \cr \cr
The algorithm conducts ADMM splitting as (L1,S1,Z),(L2,S2).
}
