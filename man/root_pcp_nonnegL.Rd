% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/root_pcp_nonnegL.R
\name{root_pcp_nonnegL}
\alias{root_pcp_nonnegL}
\title{Non-negative squareroot PCP function}
\usage{
root_pcp_nonnegL(D, lambda, mu)
}
\arguments{
\item{D}{The original dataset.}

\item{lambda}{The \code{lambda} parameter penalizes the proximal L1 gradient on the \code{S} matrix.}

\item{mu}{The \code{mu} parameter penalizes the error term.}
}
\value{
Returns two solution matrices, the low rank \code{L} matrix and the sparse \code{S} matrix.
}
\description{
\code{root_pcp_nonnegL} implements \code{rootPCP} with a non-negativity constraint on the \code{L} solution matrix. \cr \cr
It solved the following ADMM splitting problem: \cr \cr
min_{L,S} \cr
||L||_* + lambda * ||S||_1 + mu * ||L+S-D||_F + I(L3>=0) \cr \cr
This is first transformed to the problem: \cr \cr
min_{L1,L2,L3,S1,S2,Z} \cr
||L1||_* + lambda * ||S1||_1 + mu * ||Z||_F \cr \cr
s.t. L1 = L2; L1 = L3; S1 = S2; L2 + S2 + Z = D. \cr \cr
The algorithm conducts ADMM splitting as (L1,S1,Z),(L2,S2).
}
